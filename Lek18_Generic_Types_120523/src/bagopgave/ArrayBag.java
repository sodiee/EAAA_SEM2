package bagopgave;import java.util.Random;public class ArrayBag<E> implements Bag<E> {    private int currentSize;    private E[] elements;    public ArrayBag() {        currentSize = 0;        elements = (E[]) new Object[10];    }    @Override    public int getCurrentSize()    {        return currentSize;    }    @Override    public boolean isFull()    {        if (currentSize == elements.length) {            return true;        } else {            return false;        }    }    @Override    public boolean isEmpty()    {        return currentSize == 0;    }    @Override    public boolean add(E newEntry) {        if (isEmpty()) {            elements[0] = newEntry;            currentSize++;        } else {            elements[currentSize] = newEntry;            currentSize++;        }        return contains(newEntry);    }    @Override    public E remove() {        int indexToBeDeleted = currentSize; //new Random().nextInt(currentSize);        E removed = null;        if (!isEmpty()) {            removed = elements[indexToBeDeleted];            elements[indexToBeDeleted] = null;            currentSize--;        }        return removed;    }    @Override    public boolean remove(E anEntry) {        E removed = null;        boolean found = false;        for (int i = 0; i < elements.length; i++) {            if (elements[i] == anEntry) {                removed = anEntry;                elements[i] = null;                currentSize--;                found = true;            }        }        return found;    }    @Override    public void clear() {        for (int i = 0; i < elements.length; i++) {            remove();        }    }    @Override    public int getFrequencyOf(E anEntry) {        int number = 0;        for (int i = 0; i < elements.length; i++) {            if (elements[i] == anEntry) {                number++;            }        }        return number;    }    @Override    public boolean contains(E anEntry) {        boolean found = false;        for (int i = 0; i < currentSize; i++) {            if (elements[i] == anEntry) {                found = true;                break;            }        }        return found;    }    @Override    public E[] toArray() {        E[] newElements = (E[]) new Object[currentSize];        return newElements;    }}